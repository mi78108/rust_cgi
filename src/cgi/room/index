#!/usr/bin/env ruby

# -*- coding: utf-8 -*-

require_relative '../_base_'
require 'socket'

Q.map(:GET, %r|/room/(\d+)$|) do |_|
  Q.ok_html File.read './room/page.html'
end

room = Q.param('argv_1')
room_sock = "/tmp/room_socket_#{room}"
room_client = Array.new
mutex = Mutex.new

Q.map(:WEBSOCKET, %r|/room/(\d+)$|) do |_|
  unless File.exist? room_sock
    serv = UNIXServer.new room_sock
    Q.on_close {
      File.delete room_sock
    }
    Thread.new do
      loop {
        client = serv.accept
        room_client.push client
        Q.write("\x0d\x07\x0d" + { count: room_client.length }.to_json, true)
        Thread.new {
          Q.on_data(client) { |chunk|
            Q.log "Sync #{chunk.to_s}"
            mutex.synchronize {
              if chunk == "\x0d\x07\x0dping"
                client.write "\x0d\x07\x0dpong"
                next
              end
              if chunk == "\x0d\x07\x0dclose"
                room_client.delete client
                Q.write("\x0d\x07\x0d" + { count: room_client.length }.to_json, true)
                break
              end
              room_client.each { |s|
                next if s == client
                if s.closed?
                  room_client.delete s
                  Q.write("\x0d\x07\x0d" + { count: room_client.length }.to_json, true)
                  next
                end
                begin
                  s.write chunk
                rescue Errno::EPIPE
                  room_client.delete s
                  Q.write("\x0d\x07\x0d" + { count: room_client.length }.to_json, true)
                end
              }
            }
          }
        }
      }
      serv.close
    end
  end
  # client
  client = UNIXSocket.new room_sock
  Q.on_close {
    client.write "\x0d\x07\x0dclose"
    client.close
  }
  Thread.new {
    Q.on_data(client) { |chunk|
      Q.write chunk
    }
  }
  Q.on_data { |chunk|
    begin
      client.write chunk
    rescue Errno::EPIPE
      break
    end
  }
end
