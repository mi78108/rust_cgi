#!/usr/bin/env node

let fs = require('fs')
const Q = require('../_base')

const upload_dir = '/tmp/upload'
if (! fs.existsSync(upload_dir))  fs.mkdirSync(upload_dir)


Q.on(Q.Method.GET, (r) => {
  if (Q.param('argv_1') === 'file') { 
    let key_file = `${upload_dir}/${Q.param('argv_2')}`
    if (fs.existsSync(key_file)) {
      Q.ok_json(fs.readFileSync(key_file, 'utf-8'));
    }
  }
  Q.ok_html(fs.readFileSync('./file/upload_page.html', 'utf-8'))
});

Q.on(Q.Method.POST, (r) => {
  Q.ready(() => {
    let type = Q.param('argv_1');
    if (['text','file'].find(v => v === type)) {
      if (type === 'text') {
        let file = {
          key: Q.param('argv_2'),
          type: 'text',
          count: Q.param('count') || 0,
          content: Q.read(Q.content_length).toString()
        };
        fs.writeFileSync(`/tmp/upload/${file.key}`, JSON.stringify(file));
        Q.ok_html("OK")
      }
      if (type === 'file') {
        if (Q.header('Upload-File-Name')){
          let writeStream = fs.createWriteStream(`${upload_dir}/${Q.header('Upload-File-Name')}`)
          process.stdin.pipe(writeStream)
          writeStream.on('finish', () => {
            Q.ok_json(JSON.stringify({msg: 'Finish', code: 200}))
          })
        }else {
          let key_file = `${upload_dir}/${Q.param('argv_2')}`
          fs.writeFileSync(key_file, Q.read(Q.content_length).toString());
          Q.ok_json(fs.readFileSync(key_file, 'utf-8'));
        }
      }
    }else {
      Q.resp_500("不支持的操作参数")
    }
  })
})


Q.on(Q.Method.WEBSOCKET, (r) => {
  if (Q.param('argv_1') === 'file') {
    let key_file = `/tmp/upload/${Q.param('argv_2')}`
    if (fs.existsSync(key_file)) {
      info = JSON.parse(fs.readFileSync(key_file).toString());
      Q.recv_ready(() => {
        let readSize = (info.fileSize - info.uploadSize >= info.chunkSize) ? info.chunkSize : info.fileSize - info.uploadSize
        let data = process.stdin.read(readSize)
        if (data) {
          process.stderr.write(`>>>>>>>>>>>>>>>>>>> UPLOAD ${info.chunkIndex} Data Len ${data.length};\n`)
          if (info.chunkIndex < info.chunkCount) {
            info.uploadSize += data.length
            // 写文件
            fs.appendFileSync(`${upload_dir}/${info.fileName}`, data, {flag: 'a'});
            // 更新info
            info.chunkIndex += 1;
            fs.writeFileSync(key_file, JSON.stringify(info));
            Q.write(JSON.stringify([info.chunkIndex, info.uploadSize]))
          }
        }
        return true
      })
      process.stderr.write(">>>>>>>>>>>>>>>>>>> UPLOAD WEBSOCKET DONE\n")
      Q.recv_end(() => {
        process.stderr.write(">>>>>>>>>>>>>>>>>>> Readable End\n")
      })
    }
  }
  if (Q.param('argv_1') === 'progress') {
    let key_file = `${upload_dir}/${Q.param('argv_2')}`
    let info = JSON.parse(fs.readFileSync(key_file, 'utf-8'));
    let upload_file = `${upload_dir}/${info.fileName}`;
    let fileSize = info.fileSize;
    Q.recv((val) => {
      if (fs.existsSync(upload_file)) {
        switch(val.toString()){
          case 'progress':
            let uploadSize = fs.statSync(upload_file).size;
            Q.write(`${uploadSize} ${fileSize}`)
            break;
          case 'keyFile':
            info = JSON.parse(fs.readFileSync(key_file, 'utf-8'));
            Q.write(JSON.stringify(info));
            break;
          default:
            Q.write(`${fs.statSync(upload_file).size} ${fileSize}`)
            break;
        }
      }else{
        Q.write('文件不存在')
      }
    })
  }
})
