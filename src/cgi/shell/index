#!/usr/bin/node

import Q from '../_base_.js'
import fs from 'fs'
import path from 'path'
import mime from 'mime'
import pty from 'node-pty'
import { v7 as u } from 'uuid'
import e from 'child_process'

// Q.map(Q.Method.GET, '/shell', '/shell/', '/shell/index').then(r => {
//   Q.ok('text/html; charset=utf-8', fs.readFileSync("./shell/page.html"))
// })

// Q.map(Q.Method.GET, /shell\/proc\/\w+/).then(r => {
//   console.error(`>>> clear webshell_auth file`, e.execSync('find /tmp -maxdepth 1 -name "webshell_*" -type f -cmin +5 -exec rm -v {} \\;').toString())
//   if (Q.req_path.endsWith('auth_uid.js')) {
//     if (Q.param('uid')) {
//       let code = u().split('-')[3]
//       fs.writeFileSync(`/tmp/webshell_${Q.param('uid')}`, code)
//       Q.ok_json(JSON.stringify({ code: 0, opt: 'auth' }))
//     }
//     //e.execSync(`echo 'AuthCode: ${code}' | mail -s 'Gentoo Shell' mi78108@foxmail.com -a 'Content-Type:text/plain; charset=utf-8; format=flowed' -a 'From: webshell <systemd@desktop.local>'`)
//     Q.ok('text/javascript; charset=utf-8', `window.uid = ${process.pid}; window.uploadChunkSize = ${5 * 1024 * 1024}; window.uploadWorkerSize = 5;`)
//   }
// })

// Q.map(Q.Method.GET, /shell\/node_modules\/\w+/).then(r => {
//   let file_path = `./${Q.header('req_argv_params').replaceAll("../", ".")}`
//   if (fs.existsSync(file_path)) {
//     Q.ok(`${mime.getType(file_path)}; charset=utf-8`, fs.readFileSync(file_path, 'utf-8'))
//   } else {
//     Q.resp_404('文件不存在')
//   }
// })

let file_path = '/tmp/downloads';
Q.on(Q.Method.GET)
  .map('/shell', '/shell/', '/shell/index').do(_ => {
    Q.ok('text/html; charset=utf-8', fs.readFileSync("./shell/page.html"))
  })
  .map(/shell\/node_modules\/\w+/).do(_ => {
    let file_path = `./${Q.header('req_argv_params').replaceAll("../", ".")}`
    if (fs.existsSync(file_path)) {
      Q.ok(`${mime.getType(file_path)}; charset=utf-8`, fs.readFileSync(file_path, 'utf-8'))
    } else {
      Q.resp_404('文件不存在')
    }
  })
  .map('/shell/proc/auth_uid.js').do(async (_) => {
    console.error(`>>> clear webshell_auth file`, e.execSync('find /tmp -maxdepth 1 -name "webshell_*" -type f -cmin +5 -exec rm -v {} \\;').toString())
    if (Q.param('uid')) {
      let authcode = u().split('-')[3]
      fs.writeFileSync(`/tmp/webshell_${Q.param('uid')}`, authcode)
      //      e.execSync(`echo 'AuthCode: ${authcode}' | mail -s 'Gentoo Shell' mi78108@foxmail.com -a 'Content-Type:text/plain; charset=utf-8; format=flowed' -a 'From: webshell <systemd@desktop.local>'`)
      await Q.ok_json(JSON.stringify({ code: 0, opt: 'auth' }))
    }
    await Q.ok('text/javascript; charset=utf-8', `window.uid = ${process.pid}; window.uploadChunkSize = ${5 * 1024 * 1024}; window.uploadWorkerSize = 5;`)
  })
  .map(/shell\/icons\/\w+/).do(async (_) => {
    let file_path = `./${Q.header('req_argv_params').replaceAll("../", ".")}`
    if (fs.existsSync(file_path)) {
      await Q.ok(`${mime.getType(file_path)}; charset=utf-8`, fs.readFileSync(file_path, 'utf-8'))
    }
    await Q.resp_404('文件不存在')
  })
  .map((v) => v.startsWith('/shell/download/')).do(async () => {
    if (Q.param('argv_2') === 'list') {
      if (!fs.existsSync(file_path)) {
        fs.mkdirSync(file_path)
      }
      let body = fs.readdirSync(file_path).map((fn) => {
        let ft = fs.statSync(`${file_path}/${fn}`);
        ft.name = fn;
        ft.file = ft.isFile();
        ft.dir = ft.isDirectory();
        ft.type = ft.isFile() ? 'file' : ft.isDirectory() ? 'dir' : 'ext'
        ft.mime = mime.getType(`${file_path}/${fn}`)
        return ft;
      })
      await Q.ok_json(body)
    }
    let file = `${decodeURI(Q.req_path).replaceAll(/^\/shell\/download/g, file_path).replaceAll("../", "")}`
    if (fs.existsSync(file)) {
      let file_stat = fs.statSync(file);
      let readStream = fs.createReadStream(file);
      Q.resp_stream(200, 'OK', mime.getType(file), file_stat.size, () => {
        readStream.pipe(process.stdout)
        return new Promise((resolve, reject) => {
          process.stdout.on('finish', resolve);
          process.stdout.on('error', reject);
        });
      }, { 'Content-Disposition': `attachment; filename=${encodeURI(path.basename(file))}` })
    } else {
      Q.resp_404('文件不存在')
    }
  })


Q.on(Q.Method.POST)
  .map('/shell/upload/pre').do(async (v) => {
    if (!fs.existsSync(file_path)) {
      fs.mkdirSync(file_path)
    }
    let file = `${file_path}/${decodeURI(Q.param('fn'))}`
    if (fs.existsSync(file)) {
      await Q.ok_json(JSON.stringify({ code: 1, info: `[${file}] 文件已经存在` }))
    }
    Q.ok_json({ code: 0, info: `[${file}:${Q.param('fs')}] 文件初始化成功` })
  })
  .map('/shell/upload').do(() => {
    let file = `${file_path}/${decodeURI(Q.param('fn'))}`
    let index = parseInt(Q.param('id'))
    let count = parseInt(Q.param('ct'))
    let chunkSize = parseInt(Q.param('cs'))
    Q.recv((data) => {
      //file = `${file}.uploading`
      if (!fs.existsSync(file)) {
        fs.writeFileSync(file, '');
      }
      let fd = fs.openSync(file, 'r+')
      fs.writeSync(fd, data, 0, data.length, index * chunkSize)
      fs.closeSync(fd);
      Q.ok_json(JSON.stringify({ code: 0, index: index }))
    })
  })
  .map('/shell/upload/chk').do(async () => {
    let file = `${file_path}/${decodeURI(Q.param('fn'))}`
    let file_src = `${file}.uploading`
    let size = parseInt(Q.param('fs'))
    if (fs.existsSync(file_src)) {
      let fd = fs.openSync(file_src, 'r+')
      let hs = Math.ceil(count / 8);
      let hu = Buffer.alloc(hs);
      fs.readSync(fd, hu, 0, hs, 0);
      fs.closeSync(fd);
      let body = hu.reduce((a, c, ix) => {
        for (let i = 0; i < 8; i++) {
          a[(ix * 8 + i)] = ((1 & c >> i) === 1);
        }
        return a;
      }, new Array()).slice(0, count)
      if (body.find(v => v === false) === undefined) {
        //长传完成
        fs.truncateSync(file_src, size);
        fs.renameSync(file_src, file);
        Q.ok_json(JSON.stringify({ code: 0, file_src: file_src, file_dsk: file, info: '文件上传完成' }))
      }
      r.ok_json(JSON.stringify({
        code: 0, info: `[${file}] 文件已经存在`, value: body.map((v, i) => {
          return v ? v : i
        }).filter(v => v !== true)
      }))
    } else {
      r.ok_json(JSON.stringify({ code: 1, info: '文件不存在', uploaded_ids: [] }))
    }
  })

Q.on(Q.Method.WEBSOCKET).map('/shell/index').do(async (v1) => {
  if (v1 === 'pre') {
    Q.write("\r\nAuth By Email ready\r\n")
    process.exit(0)
  }
  const authfile = `/tmp/webshell_${Q.param('uid')}`;
  if (!fs.existsSync(authfile)) {
    Q.write("\r\nAuth fails timeout; quite")
    process.exit(0)
  }
  const storecode = fs.readFileSync(authfile).toString();
  Q.onclose.push(()=>{
    fs.unlinkSync(authfile);
  })
  if (true || Q.param('code') === storecode) {
    const shell = fs.existsSync('/bin/zsh') ? 'zsh' : 'bash';
    Q.write(`using ${shell} ${Q.header("req_params")}\r\n`)
    const cmd = pty.spawn(shell, [], {
      name: 'xterm-256color',
      cols: parseInt(Q.param("cols")),
      rows: parseInt(Q.param("rows")),
      env: process.env
    });
    cmd.onData((data) => {
      Q.write(data);
    });
    cmd.onExit(() => {
      Q.write("\r\nshell exit; quite")
      process.exit(0)
    })
    let magic = Buffer.from('\x0d\x07\x0d')
    Q.onData((data) => {
      if(data.slice(0,3).equals(magic)){
        console.error('>>>>>> user config === ',data.slice(3).toString())
        let cfg = JSON.parse(data.slice(3).toString());
        if(cfg.o === 'xterm_resize'){
          console.error('>>>>>> xterm_resize === ',cfg)
          cmd.resize(cfg.cols, cfg.rows)
        }
      }else{
        cmd.write(data)
      }
    })
  } else {
    Q.write("\r\nAuth fails; quite")
    process.exit(0)
  }
})
