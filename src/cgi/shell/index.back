#!/usr/bin/node

import Q from '../_base.js'
import fs from 'fs'
import path from 'path'
import mime from 'mime'
import pty from 'node-pty'
import { v7 as u } from 'uuid'
import e from 'child_process'


Q.on(Q.Method.GET, (r) => {
  if (['/shell', '/shell/', '/shell/index'].indexOf(Q.req_path) > -1) {
    r.ok('text/html; charset=utf-8', fs.readFileSync("./shell/page.html"))
  }
  if (Q.req_path.startsWith("/shell/proc/")) {
    console.error(`>>> clear webshell_auth file`, e.execSync('find /tmp -maxdepth 1 -name "webshell_*" -type f -cmin +5 -exec rm -v {} \\;'))
    if (Q.param("argv_2") == 'auth_uid.js') {
      if (Q.param('uid')) {
        let code = u().split('-')[3]
        fs.writeFileSync(`/tmp/webshell_${Q.param('uid')}`, code)
        Q.ok_json(JSON.stringify({ code: 0, opt: 'auth' }))
      }
      //e.execSync(`echo 'AuthCode: ${code}' | mail -s 'Gentoo Shell' mi78108@foxmail.com -a 'Content-Type:text/plain; charset=utf-8; format=flowed' -a 'From: webshell <systemd@desktop.local>'`)
      Q.ok('text/javascript; charset=utf-8', `window.uid = ${process.pid}; window.uploadChunkSize = ${5 * 1024 * 1024}; window.uploadWorkerSize = 5;`)
    }
  }
  // todo 有风险 可以浏览到 / 待修复
  if (Q.req_path.startsWith("/shell/shell/node_modules")) {
    let file_path = `./${Q.header('req_argv_params').replaceAll("../", ".")}`
    if (fs.existsSync(file_path)) {
      Q.ok(`${mime.getType(file_path)}; charset=utf-8`, fs.readFileSync(file_path, 'utf-8'))
    } else {
      Q.resp_404('文件不存在')
    }
  }

  if (Q.req_path.startsWith("/shell/shell/icons")) {
    let file_path = `./${Q.header('req_argv_params').replaceAll("../", ".")}`
    if (fs.existsSync(file_path)) {
      Q.ok(`${mime.getType(file_path)}; charset=utf-8`, fs.readFileSync(file_path, 'utf-8'))
    } else {
      Q.resp_404('文件不存在')
    }
  }
  if (Q.req_path.startsWith("/shell/download")) {
    if (Q.param('argv_2') === 'list') {
      let file_path = `/tmp/downloads`
      if (!fs.existsSync(file_path)) {
        fs.mkdirSync(file_path)
      }
      let body = fs.readdirSync(file_path).map((fn) => {
        let ft = fs.statSync(`${file_path}/${fn}`);
        ft.name = fn;
        ft.file = ft.isFile();
        ft.dir = ft.isDirectory();
        ft.type = ft.isFile() ? 'file' : ft.isDirectory() ? 'dir' : 'ext'
        ft.mime = mime.getType(`${file_path}/${fn}`)
        return ft;
      })
      Q.ok_json(JSON.stringify(body))
    }
    let file_path = `${decodeURI(Q.req_path).replaceAll(/^\/shell\/download/g, '/tmp').replaceAll("../", "")}`
    if (fs.existsSync(file_path)) {
      let file_stat = fs.statSync(file_path);
      process.stdout.write(`HTTP/1.0 200 OK\r\nContent-Type: ${mime.getType(file_path)}; charset=utf-8\r\nContent-Length: ${file_stat.size}\r\n`)
      process.stdout.write(`Content-Disposition: attachment; filename=${encodeURI(path.basename(file_path))}\r\n\r\n`);
      let readStream = fs.createReadStream(file_path);
      readStream.pipe(process.stdout)
      Q.response = true;
    } else {
      Q.resp_404('文件不存在')
    }
  }
  Q.resp_500('参数错误， 或文件不存在')
});

Q.mapon(Q.Method.GET,'/shell/test').then((v1,v2)=>{
  console.error('++++++++++++++++++++++++++++++')
  console.error(`>>>>>>>>>>>>>>> ${v1} ${v2}`)
})

Q.on(Q.Method.POST, (r) => {
  if (Q.req_path.startsWith("/shell/config")) {
    Q.recv((cfg) => {
      fs.writeFileSync('./shell/xtermconfig', cfg);
      r.ok_json(JSON.stringify({ code: 0, opt: 'config' }))
    })
  }
  if (Q.req_path.startsWith("/shell/upload")) {
    let file_path = `/tmp/downloads`
    if (!fs.existsSync(file_path)) {
      fs.mkdirSync(file_path)
    }
    let file = `${file_path}/${decodeURI(Q.param('fn'))}`
    let index = parseInt(Q.param('id'))
    let count = parseInt(Q.param('ct'))
    let chunkSize = parseInt(Q.param('cs'))
    if (Q.param('argv_2') == 'pre') {
      let size = parseInt(Q.param('fs'))
      if (fs.existsSync(file)) {
        r.ok_json(JSON.stringify({ code: 1, info: `[${file}] 文件已经存在` }))
      }
      r.ok_json(JSON.stringify({ code: 0, info: `[${file}:${Q.param('fs')}] 文件初始化成功` }))
    }
    if (Q.param('argv_2') == 'chk') {
      let file_src = `${file}.uploading`
      let size = parseInt(Q.param('fs'))
      if (fs.existsSync(file_src)) {
        let fd = fs.openSync(file_src, 'r+')
        let hs = Math.ceil(count / 8);
        let hu = Buffer.alloc(hs);
        fs.readSync(fd, hu, 0, hs, 0);
        fs.closeSync(fd);
        let body = hu.reduce((a, c, ix) => {
          for (let i = 0; i < 8; i++) {
            a[(ix * 8 + i)] = ((1 & c >> i) === 1);
          }
          return a;
        }, new Array()).slice(0, count)
        if (body.find(v => v === false) === undefined) {
          //长传完成
          fs.truncateSync(file_src, size);
          fs.renameSync(file_src, file);
          Q.ok_json(JSON.stringify({ code: 0, file_src: file_src, file_dsk: file, info: '文件上传完成' }))
        }
        r.ok_json(JSON.stringify({
          code: 0, info: `[${file}] 文件已经存在`, value: body.map((v, i) => {
            return v ? v : i
          }).filter(v => v !== true)
        }))
      } else {
        r.ok_json(JSON.stringify({ code: 1, info: '文件不存在', uploaded_ids: [] }))
      }
    }

    let chunks = [];
    Q.recv_on_data((chunk) => {
      chunks.push(chunk)
    }, () => {
      file = `${file}.uploading`
      if (!fs.existsSync(file)) {
        fs.writeFileSync(file, 'w');
      }
      let fd = fs.openSync(file, 'r+')
      let data = Buffer.concat(chunks);
      fs.writeSync(fd, data, 0, data.length, index * chunkSize + Math.ceil(count / 8))
      fs.closeSync(fd);
      r.ok_json(JSON.stringify({ code: 0, index: index }))
    })
  }
})


Q.on(Q.Method.WEBSOCKET, (r) => {
  const authfile = `/tmp/webshell_${Q.param('uid')}`;
  if (!fs.existsSync(authfile)) {
    r.write("\r\nAuth fails timeout; quite")
    process.exit(0)
  }
  const storecode = fs.readFileSync(authfile).toString();
  fs.unlinkSync(authfile);
  if (Q.param('code') === storecode) {
    const shell = fs.existsSync('/bin/zsh') ? 'zsh' : 'bash';
    r.write(`using ${shell} ${Q.header("req_params")}\r\n`)
    const cmd = pty.spawn(shell, [], {
      name: 'xterm-256color',
      cols: parseInt(Q.param("cols")),
      rows: parseInt(Q.param("rows")),
      env: process.env
    });
    fs.watchFile('./shell/xtermconfig', () => {
      let cfg = JSON.parse(fs.readFileSync('./shell/xtermconfig'))
      cmd.resize(cfg.cols, cfg.rows)
      console.error(">>> ========================== Xterm resize reconfig")
    })
    cmd.onData((data) => {
      r.write(data);
    });
    cmd.onExit(() => {
      r.write("\r\nshell exit; quite")
      process.exit(0)
    })
    r.recv((data) => {
      cmd.write(data)
    })
  } else {
    r.write("\r\nAuth fails; quite")
    process.exit(0)
  }
})
